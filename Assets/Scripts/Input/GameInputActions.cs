//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Scripts/Input/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Input/GameInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""None"",
            ""id"": ""78bffde1-a878-4219-8dee-9fb794d707d1"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""UI_PopupTest"",
            ""id"": ""50e2ee2f-f5aa-4776-b4e3-f3998e679a96"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""8b2b8373-d163-4925-97c9-4204df7146f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f8bf28d-3bfd-4489-8130-cc5d51d2594e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lobby"",
            ""id"": ""27c66193-b3d1-44a4-8904-9393ec3c42e9"",
            ""actions"": [
                {
                    ""name"": ""Player"",
                    ""type"": ""Value"",
                    ""id"": ""39cdb4cb-773d-48ab-b1c0-4583f0795520"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player_Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""85608a89-13bc-4fb9-a9aa-a4f0720f5f76"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""386138d8-f4b4-42ed-92a1-ab2d429c8776"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ff89ca0-786f-4c33-94a4-5dd200cf7839"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""724dbedc-d7e7-4222-9234-5a6549ebb37e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d6e5d393-155e-4a39-8b2f-b23bae48717b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""768721f4-81ec-429b-a005-8285d718d42b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8b4c6c4a-9523-4dbf-9699-42b359648ba6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player_Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI_DialogueWindow"",
            ""id"": ""840e0149-8362-4b71-842b-3ff5c570aaeb"",
            ""actions"": [
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""97ba5403-4882-4b61-9ce0-27a7ff709984"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""caccb4cd-aebd-4de4-97b9-a49c213c63e9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // None
        m_None = asset.FindActionMap("None", throwIfNotFound: true);
        // UI_PopupTest
        m_UI_PopupTest = asset.FindActionMap("UI_PopupTest", throwIfNotFound: true);
        m_UI_PopupTest_Close = m_UI_PopupTest.FindAction("Close", throwIfNotFound: true);
        // Lobby
        m_Lobby = asset.FindActionMap("Lobby", throwIfNotFound: true);
        m_Lobby_Player = m_Lobby.FindAction("Player", throwIfNotFound: true);
        m_Lobby_Player_Interaction = m_Lobby.FindAction("Player_Interaction", throwIfNotFound: true);
        // UI_DialogueWindow
        m_UI_DialogueWindow = asset.FindActionMap("UI_DialogueWindow", throwIfNotFound: true);
        m_UI_DialogueWindow_Next = m_UI_DialogueWindow.FindAction("Next", throwIfNotFound: true);
    }

    ~@GameInputActions()
    {
        UnityEngine.Debug.Assert(!m_None.enabled, "This will cause a leak and performance issues, GameInputActions.None.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI_PopupTest.enabled, "This will cause a leak and performance issues, GameInputActions.UI_PopupTest.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Lobby.enabled, "This will cause a leak and performance issues, GameInputActions.Lobby.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI_DialogueWindow.enabled, "This will cause a leak and performance issues, GameInputActions.UI_DialogueWindow.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // None
    private readonly InputActionMap m_None;
    private List<INoneActions> m_NoneActionsCallbackInterfaces = new List<INoneActions>();
    /// <summary>
    /// Provides access to input actions defined in input action map "None".
    /// </summary>
    public struct NoneActions
    {
        private @GameInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public NoneActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_None; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="NoneActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(NoneActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="NoneActions" />
        public void AddCallbacks(INoneActions instance)
        {
            if (instance == null || m_Wrapper.m_NoneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NoneActionsCallbackInterfaces.Add(instance);
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="NoneActions" />
        private void UnregisterCallbacks(INoneActions instance)
        {
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="NoneActions.UnregisterCallbacks(INoneActions)" />.
        /// </summary>
        /// <seealso cref="NoneActions.UnregisterCallbacks(INoneActions)" />
        public void RemoveCallbacks(INoneActions instance)
        {
            if (m_Wrapper.m_NoneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="NoneActions.AddCallbacks(INoneActions)" />
        /// <seealso cref="NoneActions.RemoveCallbacks(INoneActions)" />
        /// <seealso cref="NoneActions.UnregisterCallbacks(INoneActions)" />
        public void SetCallbacks(INoneActions instance)
        {
            foreach (var item in m_Wrapper.m_NoneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NoneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="NoneActions" /> instance referencing this action map.
    /// </summary>
    public NoneActions @None => new NoneActions(this);

    // UI_PopupTest
    private readonly InputActionMap m_UI_PopupTest;
    private List<IUI_PopupTestActions> m_UI_PopupTestActionsCallbackInterfaces = new List<IUI_PopupTestActions>();
    private readonly InputAction m_UI_PopupTest_Close;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI_PopupTest".
    /// </summary>
    public struct UI_PopupTestActions
    {
        private @GameInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UI_PopupTestActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI_PopupTest/Close".
        /// </summary>
        public InputAction @Close => m_Wrapper.m_UI_PopupTest_Close;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI_PopupTest; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UI_PopupTestActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UI_PopupTestActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UI_PopupTestActions" />
        public void AddCallbacks(IUI_PopupTestActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_PopupTestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_PopupTestActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UI_PopupTestActions" />
        private void UnregisterCallbacks(IUI_PopupTestActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UI_PopupTestActions.UnregisterCallbacks(IUI_PopupTestActions)" />.
        /// </summary>
        /// <seealso cref="UI_PopupTestActions.UnregisterCallbacks(IUI_PopupTestActions)" />
        public void RemoveCallbacks(IUI_PopupTestActions instance)
        {
            if (m_Wrapper.m_UI_PopupTestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UI_PopupTestActions.AddCallbacks(IUI_PopupTestActions)" />
        /// <seealso cref="UI_PopupTestActions.RemoveCallbacks(IUI_PopupTestActions)" />
        /// <seealso cref="UI_PopupTestActions.UnregisterCallbacks(IUI_PopupTestActions)" />
        public void SetCallbacks(IUI_PopupTestActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_PopupTestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_PopupTestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UI_PopupTestActions" /> instance referencing this action map.
    /// </summary>
    public UI_PopupTestActions @UI_PopupTest => new UI_PopupTestActions(this);

    // Lobby
    private readonly InputActionMap m_Lobby;
    private List<ILobbyActions> m_LobbyActionsCallbackInterfaces = new List<ILobbyActions>();
    private readonly InputAction m_Lobby_Player;
    private readonly InputAction m_Lobby_Player_Interaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "Lobby".
    /// </summary>
    public struct LobbyActions
    {
        private @GameInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LobbyActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Lobby/Player".
        /// </summary>
        public InputAction @Player => m_Wrapper.m_Lobby_Player;
        /// <summary>
        /// Provides access to the underlying input action "Lobby/Player_Interaction".
        /// </summary>
        public InputAction @Player_Interaction => m_Wrapper.m_Lobby_Player_Interaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Lobby; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LobbyActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LobbyActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LobbyActions" />
        public void AddCallbacks(ILobbyActions instance)
        {
            if (instance == null || m_Wrapper.m_LobbyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LobbyActionsCallbackInterfaces.Add(instance);
            @Player.started += instance.OnPlayer;
            @Player.performed += instance.OnPlayer;
            @Player.canceled += instance.OnPlayer;
            @Player_Interaction.started += instance.OnPlayer_Interaction;
            @Player_Interaction.performed += instance.OnPlayer_Interaction;
            @Player_Interaction.canceled += instance.OnPlayer_Interaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LobbyActions" />
        private void UnregisterCallbacks(ILobbyActions instance)
        {
            @Player.started -= instance.OnPlayer;
            @Player.performed -= instance.OnPlayer;
            @Player.canceled -= instance.OnPlayer;
            @Player_Interaction.started -= instance.OnPlayer_Interaction;
            @Player_Interaction.performed -= instance.OnPlayer_Interaction;
            @Player_Interaction.canceled -= instance.OnPlayer_Interaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LobbyActions.UnregisterCallbacks(ILobbyActions)" />.
        /// </summary>
        /// <seealso cref="LobbyActions.UnregisterCallbacks(ILobbyActions)" />
        public void RemoveCallbacks(ILobbyActions instance)
        {
            if (m_Wrapper.m_LobbyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LobbyActions.AddCallbacks(ILobbyActions)" />
        /// <seealso cref="LobbyActions.RemoveCallbacks(ILobbyActions)" />
        /// <seealso cref="LobbyActions.UnregisterCallbacks(ILobbyActions)" />
        public void SetCallbacks(ILobbyActions instance)
        {
            foreach (var item in m_Wrapper.m_LobbyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LobbyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LobbyActions" /> instance referencing this action map.
    /// </summary>
    public LobbyActions @Lobby => new LobbyActions(this);

    // UI_DialogueWindow
    private readonly InputActionMap m_UI_DialogueWindow;
    private List<IUI_DialogueWindowActions> m_UI_DialogueWindowActionsCallbackInterfaces = new List<IUI_DialogueWindowActions>();
    private readonly InputAction m_UI_DialogueWindow_Next;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI_DialogueWindow".
    /// </summary>
    public struct UI_DialogueWindowActions
    {
        private @GameInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UI_DialogueWindowActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI_DialogueWindow/Next".
        /// </summary>
        public InputAction @Next => m_Wrapper.m_UI_DialogueWindow_Next;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI_DialogueWindow; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UI_DialogueWindowActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UI_DialogueWindowActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UI_DialogueWindowActions" />
        public void AddCallbacks(IUI_DialogueWindowActions instance)
        {
            if (instance == null || m_Wrapper.m_UI_DialogueWindowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UI_DialogueWindowActionsCallbackInterfaces.Add(instance);
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UI_DialogueWindowActions" />
        private void UnregisterCallbacks(IUI_DialogueWindowActions instance)
        {
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UI_DialogueWindowActions.UnregisterCallbacks(IUI_DialogueWindowActions)" />.
        /// </summary>
        /// <seealso cref="UI_DialogueWindowActions.UnregisterCallbacks(IUI_DialogueWindowActions)" />
        public void RemoveCallbacks(IUI_DialogueWindowActions instance)
        {
            if (m_Wrapper.m_UI_DialogueWindowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UI_DialogueWindowActions.AddCallbacks(IUI_DialogueWindowActions)" />
        /// <seealso cref="UI_DialogueWindowActions.RemoveCallbacks(IUI_DialogueWindowActions)" />
        /// <seealso cref="UI_DialogueWindowActions.UnregisterCallbacks(IUI_DialogueWindowActions)" />
        public void SetCallbacks(IUI_DialogueWindowActions instance)
        {
            foreach (var item in m_Wrapper.m_UI_DialogueWindowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UI_DialogueWindowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UI_DialogueWindowActions" /> instance referencing this action map.
    /// </summary>
    public UI_DialogueWindowActions @UI_DialogueWindow => new UI_DialogueWindowActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "None" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="NoneActions.AddCallbacks(INoneActions)" />
    /// <seealso cref="NoneActions.RemoveCallbacks(INoneActions)" />
    public interface INoneActions
    {
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI_PopupTest" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UI_PopupTestActions.AddCallbacks(IUI_PopupTestActions)" />
    /// <seealso cref="UI_PopupTestActions.RemoveCallbacks(IUI_PopupTestActions)" />
    public interface IUI_PopupTestActions
    {
        /// <summary>
        /// Method invoked when associated input action "Close" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClose(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Lobby" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LobbyActions.AddCallbacks(ILobbyActions)" />
    /// <seealso cref="LobbyActions.RemoveCallbacks(ILobbyActions)" />
    public interface ILobbyActions
    {
        /// <summary>
        /// Method invoked when associated input action "Player" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayer(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Player_Interaction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayer_Interaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI_DialogueWindow" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UI_DialogueWindowActions.AddCallbacks(IUI_DialogueWindowActions)" />
    /// <seealso cref="UI_DialogueWindowActions.RemoveCallbacks(IUI_DialogueWindowActions)" />
    public interface IUI_DialogueWindowActions
    {
        /// <summary>
        /// Method invoked when associated input action "Next" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNext(InputAction.CallbackContext context);
    }
}
